//////////////////////////////////////////////////////////////////////////////////////////
#bodinc mantissa
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
Message/sync()
   \if synced
      return;
   
   inbound_vol = findVolunteer(inbound_number);
   
   broadcast_targets.clear();
   unknown_broadcast_targets.clear();
   \sloop outbound_numbers
      auto vollo = findVolunteer(moo);
      \if vollo
         broadcast_targets.push_back(vollo);
      \else
         unknown_broadcast_targets.push_back(moo);
   
   synced = true;
   
//////////////////////////////////////////////////////////////////////////////////////////
Message/getInboundLabel() -> string
   \if inbound_vol
      return inbound_vol->full_name;
   return inbound_number;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
SurveyAnswer/sync()
   \if synced
      return;
   
   //source_volunteer = findVolunteer(compactifyNumber(source_number));
   // we'll worry about you later
   
   synced = true;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
Volunteer/sync()
   \if synced
      return;
   
   taskptrs.clear();
   \sloop assigned_tasks
      auto * letask = tasks(moo);
      \if letask
         taskptrs.push_back(letask); // yeah
   
   synced = true;
//////////////////////////////////////////////////////////////////////////////////////////
Volunteer/addTask(const string& thetask_id)
   
   \sloop assigned_tasks
      \if moo == thetask_id
         return; // no point
   
   assigned_tasks.push_back(thetask_id);
   
   synced = false;
   save();
//////////////////////////////////////////////////////////////////////////////////////////
Volunteer/removeTask(const string& thetask_id)
   
   \sloop assigned_tasks, moo, counta
      \if moo == thetask_id
         assigned_tasks.erase(assigned_tasks.begin() + counta);
         synced = false;
         save();
         return; // no point
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
Task/sync()
   
   \if synced
      return;
   
   \\/ "Syncing : " name " / " description " : " assignments.size() " @ " ((uint64_t) this)
   
   vol_assignees.clear();
   \sloop assignments
      auto * lesignee = findVolunteer(moo.volunid).rec();
      \if lesignee
         vol_assignees.push_back(lesignee);
   
   
   synced = true;
//////////////////////////////////////////////////////////////////////////////////////////
Task/addVolunteer(Volunteer * leteer, Manti * lemanti)
   
   leteer->addTask(name);
   
   \sloop assignments
      \if moo.volunid == leteer->name
         return;
   
   synced = false;
   assignments.push_back(TaskAssignment());
   auto& backa = assignments.back();
   backa.volunid = leteer->name;
   
   string message;
   message = "You have been assigned a task\n" + description;
   message.append("\nreply OK to acknowledge, NO to refuse");
   message.append("\nreply DONE to signal task is done");
   lemanti->performMessageSending(leteer->name, message);
   
   save(); // I guess. fuck it
   
//////////////////////////////////////////////////////////////////////////////////////////
Task/clearVolunteers()

   \if assignments.size() == 0
      return;
   
   \sloop assignments
      auto * levol = findVolunteer(moo.volunid).rec();
      \if levol
         levol->removeTask(name);
   
   assignments.clear();
   save();
   synced = false;
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
++/findVolunteer(const string& phonenum) -> vOLUNTEER
   auto * ret = volunteers(phonenum);
   return ret;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
SearchPredPart/matchCheck(const string& thestr) -> bool
   \if got_any
      return false;
   
   \if Morestring::contains(thestr, text)
      got_any = true;
      return true;
      // screw bloom filters, for now
   return false;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
SearchPred/finishMatch(const string& thestr) -> bool
   \sloop parts
      \if moo.matchCheck(thestr)
         matchcount++;
         \if matchcount == parts.size()
            return true;
   
   return false;
//////////////////////////////////////////////////////////////////////////////////////////
SearchPred/clearBools()
   \sloop parts
      moo.got_any = false;
   matchcount = 0;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
SearchPred/matches(Volunteer& levol) -> bool
   clearBools();
   
   \if parts.size() == 0
      return true;
   
   \if finishMatch(levol.name)
      return true;
      
   \if finishMatch(levol.full_name)
      return true;
      
   \sloop levol.tags
      \if finishMatch(moo)
         return true;
         
   \if finishMatch(levol.notes)
      return true;
   
   return false;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
SearchPred/matches(Task& task) -> bool
   clearBools();
   
   \if parts.size() == 0
      return true;
   
   
   \if finishMatch(task.description)
      return true;
   \if finishMatch(task.notes)
      return true;
      
   \if finishMatch(task.notes)
      return true;
   
   return false;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
SearchPred/matches(Message& mess) -> bool
   clearBools();
   
   \if parts.size() == 0
      return true;
   
   \if finishMatch(mess.message)
      return true;
   
   
   return false;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
