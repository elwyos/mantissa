//////////////////////////////////////////////////////////////////////////////////////////
#include lmdb.lmap
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class SearchableBase

   bool synced = false
   
   bool selected = false
   
   
   vOLUNTEER inbound_vol
   
   vector<tAG> searchable_tags
   vector<vOLUNTEER> broadcast_targets
   vector<string> unknown_broadcast_targets
      // from volunteer tags or message origin tags
      
   string estimated_firstname
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class SurveyAnswerBase
   vOLUNTEER source_volunteer
   bool synced
//////////////////////////////////////////////////////////////////////////////////////////
flec_class SurveyAnswer : public SurveyAnswerBase
   string source_number
   string answer

   /\/ uNSORTED /\/

      sync();

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
// most recent broadcasts
flec_class Message : public lmapTHING, public SearchableBase, public Softpointable
   
   [soft: mESSAGE]
   
   string name // aka broadcast ID. why not make it persistent
   bool is_inbound = false
   bool is_outbound = false
   
   string message
   
   bool is_survey = false
   vector<string> survey_choices
      // for handling survey answers
   
   
   vector<string> outbound_numbers
   string inbound_number
   
   SDate date

   /\/ uNSORTED /\/

      sync();
      getInboundLabel() -> string;

//////////////////////////////////////////////////////////////////////////////////////////
DECLlmdbmap(messages, Message, "mantissadb");
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class VolunteerBase
   
   vector<tASK> taskptrs
   
//////////////////////////////////////////////////////////////////////////////////////////
flec_class Volunteer : public lmapTHING, public SearchableBase, public Softpointable, public VolunteerBase
   
   [soft: vOLUNTEER]
   
   string name // aka phonenumber, which is used as ID (contracted and no space)
   
   string full_name
   string firstname // for convenience
   vector<string> tags
   string notes
   
   vector<string> assigned_tasks :: 3
   
   SDate date
      // creation date, automatic

   /\/ uNSORTED /\/

      sync();
      addTask(const string& thetask_id);
      removeTask(const string& thetask_id);

   
//////////////////////////////////////////////////////////////////////////////////////////
DECLlmdbmap(volunteers, Volunteer, "mantissadb");
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
flec_class TaskAssignment
   string volunid
   char task_letter // for this particular volunteer
   
   bool allow_accept
   bool allow_refuse
   bool allow_done
   
   bool accepted
   bool refused
   bool marked_done
   bool message_sent
   
//////////////////////////////////////////////////////////////////////////////////////////
flec_class TaskUpdate
   string text
   SDate time
   
//////////////////////////////////////////////////////////////////////////////////////////
class TaskBase
   
   vector<vOLUNTEER> vol_assignees
   
//////////////////////////////////////////////////////////////////////////////////////////
flec_class Task : public lmapTHING, public SearchableBase, public Softpointable, public TaskBase
   
   [soft: tASK]
   
   string name
   string description
   
   string notes
   
   SDate creation_date
   
   vector<TaskUpdate> updates
   SDate last_update
   
   vector<TaskAssignment> assignments
   
   bool done_signalled
   bool completed
   SDate completion_date

   /\/ uNSORTED /\/

      sync();
      addVolunteer(Volunteer * leteer, Manti * lemanti);
      clearVolunteers();

   
   
//////////////////////////////////////////////////////////////////////////////////////////
DECLlmdbmap(tasks, Task, "mantissadb");
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class TagBase
   
   bool selected
   
//////////////////////////////////////////////////////////////////////////////////////////
flec_class Tag : public lmapTHING, public Softpointable, public TagBase
   [soft: tAG]
   // found tags
   string name
   int assigned_id
//////////////////////////////////////////////////////////////////////////////////////////
DECLlmdbmap(tags, Tag, "mantissadb");
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
flec_class RawMessage
   bool inbound
   bool outbount
   bool not_actually_sent :: 3
   string message_id // messageId
   string out_addr
   string message
   SDate received_time
      // won't be using timestamp for now
   bool processed = false
//////////////////////////////////////////////////////////////////////////////////////////
//DECLlmdbmap(rawinbounds, RawInbound, "mantissadb");
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class SearchPredPart
   string text;
   vector<Tag*> tags; // tags that match this part
   
   bool got_any = false

   /\/ uNSORTED /\/

      matchCheck(const string& thestr) -> bool;

   
//////////////////////////////////////////////////////////////////////////////////////////
class SearchPred
   vector<SearchPredPart> parts
   int matchcount = 0;

   /\/ uNSORTED /\/

      matches(Volunteer& levol) -> bool;
      // matches(Message& levol) -> bool;
      finishMatch(const string& thestr) -> bool;
      clearBools();
      matches(Task& task) -> bool;
      matches(Message& mess) -> bool;

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
